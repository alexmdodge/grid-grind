{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/js/colorTree.js",
    "app/js/game.js",
    "app/js/grid-grind-state.js",
    "app/js/levels.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/* globals console */\n/* jshint esversion: 6 */\n\n// A node container object which wraps the current tile with information\n// about whether it has already been stored in the color tree\nexport class ColorNodeContainer {\n   \n   constructor(colorTile) {\n      this.tile = colorTile;\n      this.matched = false;\n   }\n}\n\n/*\n * Node\n *\n * The node object has a data element and an array which\n * contains an array with all of the connected child nodes\n *\n */\nexport class ColorNode {\n   \n   constructor(data) {\n      this.data = data;\n      this.children = [];\n   }\n}\n\n/*\n * ColorTree\n *\n * The main tree objects which contains a number of helpful\n * methods for adding, removing, and manipulating nodes.\n *\n */\nexport class ColorTree {\n   \n   constructor() {\n      this.nodeCount = 0;\n      this.root = null;\n   }\n\n   /*\n    * add\n    *\n    * This function adds nodes to the tree\n    *\n    */\n   add(data, toNodeData) {\n      \n      // Creates a node with the data stored and uses the\n      // breadth first search\n      var node = new ColorNode(data);\n      var parent = toNodeData ? this.findBFS(toNodeData) : null;\n      \n      // As a reminder null will return false, and any object\n      // will return true, even with no data assigned.\n      if(parent) {\n         parent.children.push(node);\n      } else {\n\n         // If this is the top level and a root hasn't been assigned\n         // the node will be assigned to it\n         if(!this.root) {\n            this.root = node;\n         } else {\n            return 'Root node is already assigned';\n         }\n      }\n   }\n\n   /*\n    * remove\n    *\n    * searches the tree for the node with the particular data\n    * and removes it.\n    *\n    */\n   remove(data) {\n     \n      // Checks if the data in the root is the requested\n      // data to delete, not that it does not remove references\n      if(this.root.data === data) {\n         this.root = null;\n      }\n\n      // Initializes array named queue with node object which\n      // contains a sub array of all child nodes\n      var queue = [this.root];\n\n      // While there are entries in the queue then continue\n      // At most is O(n) where n is the number of nodes in\n      // the tree\n      while(queue.length) {\n\n         // Removes the node in the queue at index 0\n         var node = queue.shift();\n         \n         // Iterate through the child nodes in the current\n         // array and check if they contain the data.\n         for(var i = 0; i < node.children.length; i++) {\n\n            if(node.children[i].data === data) {\n\n               // If data found splice it from current child node\n               // array\n               node.children.splice(i, 1);\n\n            } else {\n\n               // If data not found add the child node to the queue\n               // and the search continues\n               queue.push(node.children[i]);\n            }\n         }\n      }\n   }\n\n   /*\n    * contains\n    *\n    * searches the tree for the data using the breadth first\n    * search\n    *\n    */\n   contains(data) {\n     return this.findBFS(data) ? true : false;\n   }\n\n   /*\n    * findBFS\n    *\n    * uses a breadth first search to find the node\n    * associated with the data\n    *\n    */\n   findBFS(data) {\n\n      // Grab the root node to start the search\n      var queue = [this.root];\n      \n      // Initiate same search as in the remove method\n      while(queue.length) {\n\n       var node = queue.shift();\n\n       if(node.data === data) {\n         return node;\n       }\n       for(var i = 0; i < node.children.length; i++) {\n         queue.push(node.children[i]);\n       }\n     }\n\n     // If no node found then it will return null by default\n     return null;\n   }\n\n   /*\n    * _preOrder\n    *\n    * Uses a recursive approach to search the tree depth first\n    * Will execute the function of the highest node first\n    *\n    */\n   _preOrder(node, fn) {\n      if(node) {\n         if(fn) {\n            fn(node);\n         }\n\n         // For each element in the child array it will\n         // continue to dive deeper until null is returned\n         for(var i = 0; i < node.children.length; i++) {\n            this._preOrder(node.children[i], fn);\n         }\n      }\n   }\n\n   /*\n    * _postOrder\n    *\n    *  Uses a recursive approach to search the tree depth first\n    *  Will execute the function of the lowest node first\n    *\n    */\n   _postOrder(node, fn) {\n     if(node) {\n       for(var i = 0; i < node.children.length; i++) {\n         this._postOrder(node.children[i], fn);\n       }\n       if(fn) {\n         fn(node);\n       }\n     }\n   }\n\n   /*\n    * traverseDFS\n    *\n    * Traverses the tree in a depth first search implementing a custom\n    * function for each of the nodes visited\n    *\n    */\n   traverseDFS(fn, method) {\n     var current = this.root;\n\n\n     if(method) {\n       this['_' + method](current, fn);\n     } else {\n       this._preOrder(current, fn);\n     }\n   }\n\n   /*\n    * traverseBFS\n    *\n    * Traverses the tree in a breadth first search implementing a custom\n    * function for each of the nodes visited. Uses same queue searching method\n    *\n    */\n   traverseBFS(fn) {\n     var queue = [this.root];\n     while(queue.length) {\n       var node = queue.shift();\n       if(fn) {\n         fn(node);\n       }\n       for(var i = 0; i < node.children.length; i++) {\n         queue.push(node.children[i]);\n       }\n     }\n   }\n}\n",
    "/* jshint esversion: 6 */\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *              \n *    [][][]  [][][] [][][] [][][]    [][][]  [][][] [][][] []    [] [][][]\n *    []      []  []   []   []   []   []      []  []   []   [][]  [] []   []\n *    [] [][] [][]     []   []   []   [] [][] [][]     []   [] [] [] []   []\n *    []  []  [] []    []   []   []   []  []  [] []    []   []  [][] []   []\n *    [][][]  []  [] [][][] [][][]    [][][]  []  [] [][][] []    [] [][][]\n * \n *                              Author : Alex Dodge\n *                       Last Modified : April 17, 2017\n *                             License : MIT     \n *\n *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nimport GridGrind from './grid-grind-state.js';\n\n// Global variables for initial navigation and to hold the players name\nexport var _ggPlayerName;\nvar _ggNavigation;\n\nclass Game extends Phaser.Game {\n\n  /**\n   * The game object initializes each piece.\n   *\n   * Game(width, height, renderer, phaser state objects)\n   *\n   * The Phaser.AUTO will auto detect which browser rendering to use and the null\n   * parameter sets the default phaser states (preload, create, update).\n   *\n   */\n  constructor() {\n    super(400, 400, Phaser.AUTO, 'gg-game-container', null);\n    this.state.add('GridGrind', GridGrind, false);\n    this.state.start('GridGrind');\n\n    this.WebFontConfig = {\n      active: function() { game.time.events.add(Phaser.Timer.SECOND, createText, this); },\n      google: {\n        families: ['Fjalla One']\n      }\n    };\n  }\n}\n\n\nclass Navigation {\n  constructor(playerName) {\n    this.playerName = playerName;\n    this.currentStep = 0;\n  }\n\n  /**\n   * Navigates to the next tutorial slide. Checks if first time in\n   * tutorial and adjusts screen accordingly.\n   */\n  nextSlide() {\n    if (this.currentStep === 0) {\n      $('.gg-tutorial').fadeIn('fast');\n\n      this.currentStep++;\n      $('.gg-tutorial-slide' + this.currentStep).delay(800).fadeIn('fast');\n    } else {\n      this.currentStep++;\n      $('.gg-tutorial-slide' + (this.currentStep - 1) ).fadeOut('fast');\n      $('.gg-tutorial-slide' + this.currentStep).delay(250).fadeIn('fast');\n    }\n  }\n\n  /**\n   * Navigates to the previous tutorial slide. Allows you to go back to\n   * the main introduction screen so you can change your name before \n   * starting the game.\n   */\n  prevSlide() {\n    if (this.currentStep - 1 === 0) {\n      $('.gg-tutorial-slide' + this.currentStep).fadeOut('fast');\n      $('.gg-tutorial').delay(500).fadeOut('fast');\n      this.currentStep--;\n    } else {\n      this.currentStep--;\n      $('.gg-tutorial-slide' + (this.currentStep + 1) ).fadeOut('fast');\n      $('.gg-tutorial-slide' + this.currentStep).delay(250).fadeIn('fast');\n    }\n  }\n\n  /**\n   * Navigates to the final slide. Is triggered when the player chooses\n   * to skip the tutorial.\n   */\n  finalSlide() {\n      $('.gg-tutorial-slide' + this.currentStep).fadeOut('fast', () => {\n        this.currentStep = 4;\n      });\n      $('.gg-tutorial-slide4').delay(250).fadeIn('fast');\n  }\n\n  startGame() {\n      $('.gg-tutorial-slide' + this.currentStep).fadeOut('fast');\n      $('.gg-tutorial').delay(250).fadeOut('fast');\n      $('.gg-intro').delay(500).fadeOut('fast', () => {\n        let ggGame = new Game();\n        $('.gg-user-interface').removeClass('gg-hide-game');\n        $('#gg-game-container').removeClass('gg-hide-game');\n        _ggPlayerName = $('.gg-field-input').val();\n      });\n  }\n}\n\n/**\n * Program is driven from this function. Begins once player\n * navigates through the tutorial, or skips it.\n */\n$(document).ready( () => {\n  $('#gg-game-container').addClass('gg-hide-game');\n\n  $('.gg-intro-button').click( () => {\n    _ggNavigation = new Navigation( $('.gg-field-input').val() );\n    _ggNavigation.nextSlide();\n  })\n\n  $('.gg-button-next').click( () => {\n    _ggNavigation.nextSlide();\n  })\n\n  $('.gg-button-back').click( () => {\n    _ggNavigation.prevSlide();\n  })\n\n  $('.gg-skip-tutorial').click( () => {\n    _ggNavigation.finalSlide();\n  })\n\n  $('.gg-button-start').click( () => {\n    _ggNavigation.startGame();\n  })\n});",
    "/* jshint esversion: 6 */\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n *    [][][]  [][][] [][][] [][][]    [][][]  [][][] [][][] []    [] [][][]\n *    []      []  []   []   []   []   []      []  []   []   [][]  [] []   []\n *    [] [][] [][]     []   []   []   [] [][] [][]     []   [] [] [] []   []\n *    []  []  [] []    []   []   []   []  []  [] []    []   []  [][] []   []\n *    [][][]  []  [] [][][] [][][]    [][][]  []  [] [][][] []    [] [][][]\n *\n *                              Author : Alex Dodge\n *                       Last Modified : April 14, 2017\n *                             License : MIT\n *\n *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nimport {Level} from './levels.js';\nimport {_ggPlayerName} from './game.js';\nimport {ColorNode, ColorTree, ColorNodeContainer} from './colorTree.js';\n\nexport class GridGrind extends Phaser.State {\n\n\tconstructor() {\n\t\tsuper();\n    this.PADDING = 5;\n\t\tthis.blocks = null;\n    this.level = null;\n    this.currentLevel = 1;\n    this.currentPoints = 0;\n    this.movesLeft = 4;\n    this.pointsLeft = 5;\n    this.pointsRequired;\n    this.playerName = \"Alex\";\n    this.score = 0;\n    this.gameStarted = false;\n    this.loadingScreen = null;\n\n    // Text variables\n    this.levelText;\n    this.levelTextStyle;\n    this.endText;\n    this.endTextStyle;\n\t}\n\n\t /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n    *\n    *                               preload()\n    *\n    * Used to load assets and also setup the features of the game. In this case\n    * the background color is set, the page is scaled, and the sprites are loaded\n    * into the game.\n    *\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n   preload() {\n      this.game.stage.backgroundColor = '#eee';\n      this.game.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');\n      this.game.load.spritesheet('blocks', '../img/hr-blocks.png', 100, 100);\n   }\n\n\n   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n    *\n    *                                 create()\n    *\n    * This is called once the preload is finished and is responsible for the setup\n    * logic where you use the sprites. For this game with blocks are generated\n    * and the text fields are setup.\n    *\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n   create() {\n      // Cleans out all previous objects\n      this.game.world.removeAll(true);\n\n      // Create a reference sprite to be passed into the current level\n      let referenceSprite = this.game.add.sprite(0,0,'blocks');\n      referenceSprite.visible = false;\n\n      // Generate level object based on difficulty\n      this.level = new Level(this.currentLevel, this.game.width, referenceSprite.width);\n\n      // Setup level text indicator\n      this.levelTextStyle = {\n        font: 'Fjalla One',\n        fontSize: 80,\n        fill: '#333', \n        align: 'center', \n      };\n      this.levelText = this.game.add.text(\n        Math.round(this.game.world.centerX), \n        Math.round(this.game.world.centerY), \n        'Level ' + this.currentLevel,\n        this.levelTextStyle\n      );\n      this.levelText.anchor.setTo(0.5,0.5);\n      this.levelText.alpha = 0;\n      this.game.add.tween(this.levelText).to( { alpha: 1 }, 300, Phaser.Easing.Linear.None, true);\n\n      // Show the level intro text, as well as the start button\n      setTimeout(() => {\n        this.game.add.tween(this.levelText).to( { alpha: 0 }, 300, Phaser.Easing.Linear.None, true);\n        // Draws the block objects on the screen for each frame\n        // Draws from a randomized array of the original sprite colours\n        this.initBlocks();\n      }, 1000);\n\n      // To add text elements to the game\n      this.currentPoints = 0;\n      this.pointsRequired = this.level.getPoints();\n      this.pointsLeft = this.pointsRequired;\n      this.movesLeft = this.level.getMoves();\n      $(\"#update-points\").html(this.score);\n      $(\"#update-moves-left\").html(this.movesLeft);\n      $(\"#player-name\").html(this.playerName);\n      $('#update-points-total').html(this.pointsLeft);\n      $('#update-points-left').html('0');\n      $('#update-level').html(this.currentLevel);\n\n      this.gameStarted = true;\n   }\n\n   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n    *\n    *                                  update()\n    *\n    * Called on every frame, this is responsible for the actual interactions with\n    * the game. In this case this function listens for players to click on the\n    * blocks. When it detects input, it triggers the block update and chain search\n    * function. These generate\n    *\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n   update() {\n   }\n\n   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n    *\n    *                                 Support Functions\n    *\n    * These are responsible for segmenting and organizing the game logic into\n    * more manageable chunks.\n    *\n    * Colours\n    * Blue #5f8ffd, Orange #fcca60, Green #69fe5e, Red #ff5c5c, Purple #d560fc\n    * Yellow #f7fc60\n    *\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n   initBlocks() {\n      let blockSize = this.level.getBlockSize();\n      let gridSize = this.level.getGridSize();\n      let blockScale = this.level.getBlockScale();\n\n      this.blocks = this.game.add.group();\n\n      for(let row=0; row < gridSize; row++) {\n\n         for(let col=0; col < gridSize; col++) {\n\n            let blockX = (col*(blockSize + this.PADDING));\n            let blockY = (row*(blockSize + this.PADDING));\n\n            let newBlock = this.game.add.sprite(blockX, blockY, 'blocks');\n            newBlock.alpha = 0;\n\n            // Fades in block randomly when added\n            let fadeRandom = (1200 * Math.random()) + 400;\n            setTimeout(() => {\n              this.game.add.tween(newBlock).to( { alpha: 1 }, 400, Phaser.Easing.Linear.None, true);\n              let newRandPos = Math.floor(Math.random()*6);\n              newBlock.frame = newRandPos;\n\n              // Will be level.getBlockSize / newBlock.width\n              newBlock.scale.setTo(blockScale, blockScale);\n\n              // Allows the block to listen to events\n              newBlock.inputEnabled = true;\n              newBlock.events.onInputDown.add(this.blockDown, this);\n              this.blocks.add(newBlock);\n            }, fadeRandom);\n         }\n      }\n   }\n\n   checkColorChain(sprite) {\n      // Find all blocks that share the same color and store them as child nodes\n      // store the parent node when it has same position\n      let allSameColors = [];\n\n      this.blocks.forEach(function(block) {\n         if (sprite.frame === block.frame) {\n            allSameColors.push(new ColorNodeContainer(block));\n         }\n      });\n\n\n      /* \n       * Create the color tree, and add the source sprite from the click\n       * as the root node. Then add it to the search queue to begin populating\n       * the color chain tree.\n       */\n      let colorChainTree = new ColorTree();\n      colorChainTree.root = new ColorNode(sprite);\n      let searchQueue = [colorChainTree.root];\n\n      /*\n       * Represents the difference a block needs to be in order to have\n       * a valid place in the chain. This could be delta left, right, up\n       * or down.\n       */\n      let delta = this.level.getBlockSize() + this.PADDING;\n\n\n      // Executes until there are no longer nodes to check and add\n      while(searchQueue.length) {\n\n         let node = searchQueue.shift();\n         let toAdd = false;\n\n         for(var i = 0; i < allSameColors.length; i++) {\n\n            /*\n             * This statement first checks if the node has already been matched\n             * to ensure no duplicate nodes are added.\n             *\n             * This statement checks each node by first checking for horizontal\n             * positioning. If adding the delta and keeping the y value the same\n             * evaluates true, then the node is not diagonal and in the proper\n             * position.\n             *\n             * It repeats this logic for all of the color tiles around the current\n             * source tile.\n             */\n\n            if (!allSameColors[i].matched) {\n\n               // Right Tile Check\n               if(node.data.x + delta == allSameColors[i].tile.x && node.data.y == allSameColors[i].tile.y) {\n                  toAdd = true;\n               }\n\n               // Left Tile Check\n               else if(node.data.x - delta == allSameColors[i].tile.x && node.data.y == allSameColors[i].tile.y) {\n                  toAdd = true;\n               }\n\n               // Up Tile Check\n               else if(node.data.y - delta == allSameColors[i].tile.y && node.data.x == allSameColors[i].tile.x) {\n                  toAdd = true;\n               }\n\n               // Down Tile Check\n               else if(node.data.y + delta == allSameColors[i].tile.y && node.data.x == allSameColors[i].tile.x) {\n                  toAdd = true;\n               }\n\n               // Final check ensures the tile is to be added and that it already hasn't been scored\n               // (faded when scored so alpha will be 0)\n\n               if(toAdd && allSameColors[i].tile.alpha !== 0) {\n                  allSameColors[i].matched = true;\n\n                  let newConnect = new ColorNode(allSameColors[i].tile);\n                  node.children.push(newConnect);\n                  searchQueue.push(newConnect);\n                  colorChainTree.nodeCount++;\n\n                  toAdd = false;\n               }\n            }\n         } // End of for loop\n      } // End of color tree population\n\n      if(colorChainTree.nodeCount > 2) {\n         // Traverses the tree, fades out linked elements, and sets the input so they can\n         // no longer be accessed\n         colorChainTree.traverseBFS((node) => {\n            // For flashing blocks\n            this.game.add.tween(node.data).to( { alpha: 0 }, 400, Phaser.Easing.Linear.None, true);\n            node.data.inputEnabled = false;\n         });\n\n         /*\n          * Chain modifier multiplies the points as the chains gets larger. This encourages\n          * larger chains to be found in order to complete the levels\n          */\n         let chainModifier = Math.ceil(colorChainTree.nodeCount / 3);\n         let modifiedScore = chainModifier * colorChainTree.nodeCount;\n\n         this.score += modifiedScore;\n         this.currentPoints += modifiedScore;\n         this.pointsLeft -= modifiedScore;\n         if (this.currentPoints >= this.pointsRequired) {\n           this.currentPoints = this.pointsRequired;\n         }\n\n         if(this.pointsLeft < 1) {\n            // trigger next level by increasing\n            this.currentLevel++;\n            $('#progress-bar-done').animate({ width: '100%' });\n            $('#progress-bar-done').delay(800).animate({ width: '0%' });\n\n            // Fade out each block individually\n            this.blocks.forEach((block) => {\n               let fadeRandom = (1200 * Math.random()) + 400;\n                setTimeout(() => {\n                  this.game.add.tween(block).to( { alpha: 0 }, 400, Phaser.Easing.Linear.None, true);\n                }, fadeRandom);\n            })\n\n            // The longest block fadeout is 1600ms\n            setTimeout(() => {\n              this.levelText.destroy();\n              this.create();\n            }, 2000);\n         } else {\n            $(\"#update-points\").html(this.score);\n            $(\"#update-points-left\").html(this.currentPoints);\n            this.gainExp();\n         }\n      }\n   }\n\n   gainExp() {\n      let progressWidth = Math.floor(100 * ((this.level.getPoints()-this.pointsLeft)/this.level.getPoints())) + '%';\n      $('#progress-bar-done').animate({\n         width: progressWidth\n      });\n   }\n\n   blockDown(sprite) {\n      if (this.movesLeft > 1) {\n\n         // Rotate the sprite frame\n         sprite.frame = (sprite.frame + 1) % 6;\n         this.movesLeft--;\n         $(\"#update-moves-left\").html(this.movesLeft);\n\n         // Take the current sprite which holds information\n         // about position and color and use to check proximity\n         this.checkColorChain(sprite);\n      } else {\n         // Restart Game\n         this.score = 0;\n         this.currentLevel = 1;\n         this.pointsLeft = this.level.getPoints();\n         this.movesLeft = this.level.getMoves();\n         $('#progress-bar-done').animate({ width: '0%' });\n\n          // Fade out each block individually\n          this.blocks.forEach((block) => {\n              let fadeRandom = (1200 * Math.random()) + 400;\n              setTimeout(() => {\n                this.game.add.tween(block).to( { alpha: 0 }, 400, Phaser.Easing.Linear.None, true);\n              }, fadeRandom);\n          })\n\n         this.endTextStyle = {\n            font: 'Fjalla One',\n            fontSize: 80,\n            fill: '#333', \n            align: 'center', \n          };\n\n          this.endText = this.game.add.text(\n            this.game.world.centerX, \n            this.game.world.centerY, \n            'Game Over',\n            this.endTextStyle,\n          );\n          this.endText.anchor.setTo(0.5,0.5);\n          this.endText.alpha = 0;\n          this.game.add.tween(this.endText).to( { alpha: 1 }, 300, Phaser.Easing.Linear.None, true);\n\n          // Show the level intro text, as well as the start button\n          setTimeout(() => {\n            this.game.add.tween(this.endText).to( { alpha: 0 }, 300, Phaser.Easing.Linear.None, true);\n          }, 2000);\n\n          // The longest block fadeout is 1600ms\n          setTimeout(() => {\n            this.endText.destroy();\n            this.create();\n          }, 2500);\n      }\n   }\n\n}\n\nexport default GridGrind;",
    "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *  \n *                              []     [][][] []  [] [][][] []     [][][]\n *  Author: Alex Dodge          []     []     []  [] []     []     []\n *  Date: April 17, 2017        []     [][]   []  [] [][]   []     [][][]\n *  License: MIT                []     []      [][]  []     []         []\n *                              [][][] [][][]   []   [][][] [][][] [][][]\n *\n *  The levels object accepts the current level and game size. It then generates \n *  all of the properties pertaining to that level. They can be retrieved through \n *  the following get methods. By dynamically generating levels, each individual\n *  does not have to be constructed, and instead levels will have properties\n *  and attributes extending the levels infinitely if required.\n *\n *  ** NOTE **\n *  This level generation does assume a static block padding size of 5 which is\n *  specified as a constant in the initial game file.\n *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nexport class Level {\n\n  /* Constructor */\n  constructor(currentLevel, gameSize, spriteSize) {\n    this.currentLevel = currentLevel;\n    this.gameSize = gameSize;\n    this.spriteSize = spriteSize;\n  }\n\n  /*\n   * getGridSize\n   *\n   * Retrieves the grid size for the level. The first level is a 3x3 and it increases\n   * by perfect squares each level, with some levels increasing only point value. The\n   * pattern for generation will change depending on how quickly the levels can be played.\n   */\n  getGridSize() {\n    if( this.currentLevel < 1) {\n      return -1; // Indicates level error\n    } else {\n      return this.currentLevel + 2; // If level 1, 3 blocks per row, 3 columns\n    }\n  }\n\n  /*\n   * getMoves\n   *\n   * Returns the number of moves available to the player\n   */\n  getMoves() {\n    if( this.currentLevel < 1) {\n      return -1; // Indicates level error\n    } else {\n      return this.currentLevel * 2 + 5; // Increase by 2, start at 6\n    }\n  }\n\n  /*\n   * getMoves\n   *\n   * Returns the number of points to complete the leve\n   */\n  getPoints() {\n    if( this.currentLevel < 1) {\n      return -1; // Indicates level error\n    } else {\n      // Increase by square, start at 4\n      return this.currentLevel * this.currentLevel + (3 * this.currentLevel);\n    }\n  }\n\n  /*\n   * getBlockSize\n   *\n   * Returns the side length of the block for the current level size.\n   * First divides the game size into chunks according to the grid size\n   * then the padding is subtracted from each to account for it in the drawing\n   * function.\n   */\n  getBlockSize() {\n    var size = Math.floor( (this.gameSize / this.getGridSize()) - 5); \n\n    if(size < 0) {\n      return -1; // indicates error\n    } else {\n      return size;\n    }\n  }\n\n  /*\n   * getBlockScale\n   *\n   * The source image for the spritesheet determines the physical pizel size\n   * of the blocks. This function determines what scale factor is needed for\n   * the size of the game. Will change dynamically depending of game size, even\n   * when scaled.\n   */\n  getBlockScale() {\n    var scale = this.getBlockSize() / this.spriteSize;\n    return scale;\n  }\n}"
  ]
}